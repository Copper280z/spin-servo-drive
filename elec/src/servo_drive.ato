#ato view --root-file servo_drive.ato --root-node servo_drive.ato/Servo_Drive

import Resistor from "std/resistor.ato"

import PowerStage from "power_stage.ato"
import stm32_kit from "stm32.ato"
import PositionSensor from "position_sensor.ato"

import Diode from "diode.ato"

import PinHeader10 from "pin_header.ato"
import PinHeader2 from "pin_header.ato"
import PinHeader25 from "pin_header.ato"

import Usbc from "usbc.ato"
import SK6805SIDE_S from "SK6805SIDE_S.ato"

import VoltageSense from "voltage_sense.ato"
import Buck from "buck.ato"
import LDO from "ldo.ato"
import XT30 from "xt30.ato"
import AdjustableLdo from "adjustable_ldo.ato"
import switch_90degree from "switch_90degree.ato"

import StemmaQtConnector from "stemma.ato"
import LTC4311 from "stemma.ato"

component PowerPad:
    pin p1
    footprint = "lib:OutputPad"


module ServoDrive:
    signal v_10
    signal v_5
    signal v_3
    signal vbatt
    signal gnd

    # Power input connector
    xt30 = new XT30
    vbatt ~ xt30.vin
    gnd ~ xt30.gnd

    # Micro
    micro_kit = new stm32_kit
    micro_kit.v_3_3 ~ v_3
    micro_kit.gnd ~ gnd

    # LED
    led = new SK6805SIDE_S
    led.vcc ~ v_5 # connect to 5V rail
    led.gnd ~ gnd
    led.data_in ~ micro_kit.micro.PA6

    # Enumeration switch
    switch = new switch_90degree
    switch_pulldown = new Resistor
    switch_pulldown.value = "10k"
    switch_pulldown.p1 ~ gnd
    switch_pulldown.p2 ~ switch.1
    switch.2 ~ v_3
    switch.1 ~ micro_kit.micro.PC13_TAMPER_RTC

    # USB-C
    usb = new Usbc
    r_cc1 = new Resistor
    r_cc1.value = "5.1k"
    r_cc2 = new Resistor
    r_cc2.value = "5.1k"
    usb.dp ~ micro_kit.usb_dp
    usb.dm ~ micro_kit.usb_dm

    usb_diode = new Diode
    usb_diode.footprint = "lib:SOD-523_L1.2-W0.8-LS1.6-RD"
    v_5 ~ usb_diode.cathode
    usb_diode.anode ~ usb.vbus

    # CC1 and CC2 so it works with USB C to USB C cables
    usb.cc1 ~ r_cc1.p1
    usb.cc2 ~ r_cc2.p1

    r_cc1.p2 ~ gnd
    r_cc2.p2 ~ gnd

    usb.gnd ~ gnd

    # 10V rail buck - powers gate drivers from VIN
    buck = new Buck
    vbatt ~ buck.VIN
    buck.VOUT ~ v_10
    buck.GND ~ gnd

    # 5v rail LDO - powers micro
    ldo_5v = new AdjustableLdo
    ldo_5v.feedback_div.r_top.value = "18kOhm"
    ldo_5v.feedback_div.r_bottom.value = "5.6kOhm"
    v_10 ~ ldo_5v.vin
    ldo_5v.vout ~ v_5
    ldo_5v.gnd ~ gnd

    # 3v3 rail LDO - powers micro
    ldo_3v3 = new AdjustableLdo
    ldo_3v3.feedback_div.r_top.value = "18kOhm"
    ldo_3v3.feedback_div.r_bottom.value = "10kOhm"
    v_5 ~ ldo_3v3.vin
    ldo_3v3.vout ~ v_3
    ldo_3v3.gnd ~ gnd

    power_stage = new PowerStage
    power_stage.v_pwr ~ vbatt
    power_stage.vcc_10v ~ v_10
    power_stage.vcc_3v3 ~ v_3
    power_stage.gnd ~ gnd

    # phase outputs
    pad_out_a = new PowerPad
    pad_out_b = new PowerPad
    pad_out_c = new PowerPad

    power_stage.out_a ~ pad_out_a.p1
    power_stage.out_b ~ pad_out_b.p1
    power_stage.out_c ~ pad_out_c.p1

    # Power stage to micro
    micro_kit.micro.PA8 ~ power_stage.high_in_a
    micro_kit.micro.PA7 ~ power_stage.low_in_a
    micro_kit.micro.PA9 ~ power_stage.high_in_b
    micro_kit.micro.PB0 ~ power_stage.low_in_b
    micro_kit.micro.PA10 ~ power_stage.high_in_c
    micro_kit.micro.PB1 ~ power_stage.low_in_c

    # Todo: merge with low side current sense
    micro_kit.micro.PA0_WKUP ~ power_stage.i_fb_a
    micro_kit.micro.PA1 ~ power_stage.i_fb_b
    micro_kit.micro.PA2 ~ power_stage.i_fb_c

    # Voltage input monitoring
    voltage_input_vdiv = new VoltageSense
    voltage_input_vdiv.in ~ xt30.vin
    voltage_input_vdiv.gnd ~ gnd
    voltage_input_vdiv.out ~ micro_kit.micro.PA3

    # Position sensor - SPI interface
    position_sensor = new PositionSensor
    position_sensor.vin ~ v_3
    position_sensor.gnd ~ gnd
    # Todo: needs to merge with position sensor update
    # micro_kit.micro.PB5 ~ position_sensor.mosi
    # micro_kit.micro.PB4 ~ position_sensor.miso
    # micro_kit.micro.PB3 ~ position_sensor.sclk
    # micro_kit.micro.PA15 ~ position_sensor.cs
    # micro_kit.micro.PB8 ~ position_sensor.encoder_a
    # micro_kit.micro.PB9 ~ position_sensor.encoder_b
    # micro_kit.micro.PA10 ~ position_sensor.encoder_z

    # i2c comms
    # we're not using the pre-built STEMMA module here because we're not adding the level shifting
    # this means it's not actually STEMMA complaint, but it's close enough for our purposes
    stemma = new StemmaQtConnector
    stemma.vcc ~ v_3
    stemma.gnd ~ gnd
    stemma.sda ~ micro_kit.micro.PB7
    stemma.scl ~ micro_kit.micro.PB6
    i2c_active_terminator = new LTC4311
    i2c_active_terminator.vcc ~ v_3
    i2c_active_terminator.gnd ~ gnd
    i2c_active_terminator.bus1 ~ stemma.sda
    i2c_active_terminator.bus2 ~ stemma.scl
    i2c_active_terminator.enable ~ stemma.vcc
